// -*- Doc -*-
// vim: set syntax=asciidoc:

= The Concurrent Schemer
Joseph Wayne Norton <norton@alum.mit.edu>
:Author Initials: JWN
:title: The Concurrent Schemer
:description: The Erlang VM supports the Scheme programming language.
:footer: Functional programming for the better good!
:brand: CSCM
:brandref: https://github.com/the-concurrent-schemer
:doctype: article
:toc2:
:data-uri:
:backend: bootstrap-docs
:link-assets:
:glyphicons: http://glyphicons.com[Glyphicons]

== Overview

"The Concurrent Schemer" (CSCM) is an implementation of the Scheme
programming language built on top of the Erlang Virtual Machine.  CSCM
combines the sequential programming model of Scheme with the
concurrent, distributed, and fault-tolerant programming model of
Erlang.  The default language is Scheme R7RS.  The default virtual
machine is Erlang/OTP R16B or higher.

Scheme is a statically scoped and properly tail recursive dialect of
the Lisp programming language invented by Guy Lewis Steele Jr. and
Gerald Jay Sussman at MIT.  It was designed to have exceptionally
clear and simple semantics and few different ways to form expressions.
A wide variety of programming paradigms, including imperative,
functional, and object-oriented styles, find convenient expression in
Scheme.

Erlang is a programming language used to build massively scalable,
soft, real-time systems with requirements on high availability.
Erlang's runtime system has built-in support for concurrency,
distribution and fault tolerance.  It is designed at the Ericsson
Computer Science Laborary and is maintained as an open-source project
and community.

CAUTION: _This documentation is under construction.  Please stay tuned
for more information later._

== Features

- The following standard features are supported or planned to be
  supported:

  * +r7rs+
  * +exact-closed+
  * +exact-complex+
  * +ieee-float+
  * +full-unicode+
  * +ratios+
  * +posix+ when the Erlang +os:type/0+ function returns +unix+ for
    +Osfamily+.
  * +windows+ when the Erlang +os:type/0+ function returns +win32+ for
    +Osfamily+.
  * +<Osfamily>+ as returned by Erlang os:type/0 function
  * +<Osname>+ as returned by Erlang os:type/0 function
  * +<Otprel>+ as returned by Erlang erlang:system_info/1 function for
    +'otp_release'+
  * +<Sysarch>+ as returned by Erlang erlang:system_info/1 function
    for +'system_architecture'+
  * Subparts of +<Sysarch>+ split by the "-" character token
  * +<Wordsize>+ as returned by Erlang erlang:system_info/1 function
    for +{'wordsize', 'external'}+ multiplied by 8
  * +big-endian+
  * +scm+
  * +scm-X.Y.Z+ where X is the major, Y is the minor, and Z is the
    patch release version of scm

== Roadmap

This roadmap is a *DRAFT*.

- Programming
  * *v0.1.0* Sequential "datum"
    ** datum model
    ** datum tokenizer and parser
    ** environment primitives

  * *v0.2.0* Sequential "primitive expressions"
    ** primitive expressions - quote, lambda, if, set!, include,
       include-ci
    ** programs - define

  * *v0.3.0* Sequential "derived expressions"
    ** derived expressions - cond, case, and, or, when, unless,
       cond-expand, let, let*, letrec, letrec*, let*-values,
       let*-values, letrec-values, begin, do, make-parameter,
       parameterize, guard
    ** programs - define-values

  * *v0.4.0* Sequential "base library"
    ** libraries - base without number (148 procedures)

  * *v0.5.0* Sequential "base number library"
    ** libraries - base number (52 procedures), complex (6
       procedures), inexact (13 procedures)

  * *v0.6.0* Sequential "libraries"
    ** programs - import, define-library
    ** libraries - case-lambda (1 procedure), char (22 procedures),
       cxr (25 procedures), eval (2 procedures), file (2 procedures),
       lazy (5 procedures), load (2 procedures), process-context (7
       procedures), read (2 procedures), repl (1 procedure), time (3
       procedures), write (8 procedures), r5rs
    ** tools - scm shell

  * *v0.7.0* Sequential "syntax"
    ** derived expressions - quasiquote, unquote, unquote-splicing
    ** syntax - let-syntax, letrec-syntax, syntax-rules, syntax-error
    ** programs - define-syntax, define-record-type

  * *v0.8.0* Sequential "features"
    ** extensions - Erlang-style pattern matching, records, and binary
       support
    ** integration - Erlang native functions, nif functions, and code
       loading
    ** tools - scmc compiler

  * *v0.9.0* Sequential "maintenance"
    ** bug fixes
    ** refactoring
    ** performance tuning
    ** documentation

  * *v1.0.0* Concurrent "processes"
    ** extensions - Erlang processes and error handling

  * *v1.1.0* Concurrent "distributed"
    ** extensions - Erlang distribution and error handling

  * *v1.2.0* Concurrent "ports and drivers"
    ** extensions - Erlang ports, drivers, and error handling

  * *v1.3.0* Concurrent "maintenance"
    ** bug fixes
    ** refactoring
    ** performance tuning
    ** documentation

- Open Telecom Platform (OTP)
  * *v1.5.0* OTP "applications"
    ** behaviors - gen_server, gen_fsm, gen_event, supervisor
    ** logging - system
    ** applications
    ** included applications
    ** distributed applications

  * *v1.6.0* OTP "releases"
    ** releases
    ** release handling
    ** release distribution
    ** release deployment

  * *v1.7.0* OTP "maintenance"
    ** bug fixes
    ** refactoring
    ** performance tuning
    ** documentation

- Tools
  * *v2.0.0* Tools
  * ...

- Education and Training
  * ...

== Enhancements

- The following enhancements beyond the <<R7RS>> specification are
  supported:

  * +letrec-values+ _derived expression binding construct_

== Limitations

- The +#!fold-case+ and +#!no-fold-case+ directives are treated as
  comments and have no effect on identifiers and character names read
  from the same port.

- Inexact constants have double precision regardless of the specified
  exponent marker.

- The following symbols as specified in <<R7RS>> are reserved and not
  allowed as the variable in +set!+, +define+, +define-values+,
  +define-syntax+, +define-record-type+, and +define-library+
  procedure calls. The +delay+, +delay-force+, +force+, +promise?+,
  and +make-promise+ symbols of _section 4.2.5_ are implemented as
  +(scheme lazy)+ library exports and thus are not reserved symbols.
  The +case-lambda+ symbol of _section 4.2.9_ is implemented as a
  +(scheme case-lambda)+ library export and thus is not a reserved
  symbol.

  * +quote+ _section 4.1.2_
  * +lambda+ _section 4.1.4_
  * +if+ _section 4.1.5_
  * +set!+ _section 4.1.6_
  * +include+ _section 4.1.7_
  * +include-ci+ _section 4.1.7_
  * +cond+ _section 4.2.1_
  * +case+ _section 4.2.1_
  * +and+ _section 4.2.1_
  * +or+ _section 4.2.1_
  * +when+ _section 4.2.1_
  * +unless+ _section 4.2.1_
  * +cond-expand+ _section 4.2.1_
  * +let+ _section 4.2.2_
  * +let*+ _section 4.2.2_
  * +letrec+ _section 4.2.2_
  * +letrec*+ _section 4.2.2_
  * +let-values+ _section 4.2.2_
  * +let*-values+ _section 4.2.2_
  * +letrec-values+ _enhancement_
  * +begin+ _section 4.2.3_
  * +do+ _section 4.2.4_
  * +make-parameter+ _section 4.2.6_
  * +parameterize+ _section 4.2.6_
  * +guard+ _section 4.2.7_
  * +quasiquote+ _section 4.2.8_
  * +unquote+ _section 4.2.8_
  * +unquote-splicing+ _section 4.2.8_
  * +let-syntax+ _section 4.3.1_
  * +letrec-syntax+ _section 4.3.1_
  * +syntax-rules+ _section 4.3.2_
  * +syntax-error+ _section 4.3.2_
  * +import+ _section 5.2_
  * +define+ _section 5.3.1 and 5.3.2_
  * +define-values+ _section 5.3.3_
  * +define-syntax+ _section 5.4_
  * +define-record-type+ _section 5.5_
  * +define-library+ _section 5.6_

- The following +(scheme base)+ library exports are not supported:
  * +bytevector-copy!+
  * +bytevector-u8-set!+
  * +list-set!+
  * +read-bytevector!+
  * +set-car!+
  * +set-cdr!+
  * +string-copy!+
  * +string-fill!+
  * +string-set!+
  * +vector-copy!+
  * +vector-fill!+
  * +vector-set!+

// == Quickstart
//
// To download and build the scm application in one shot, please follow
// this recipe:
//
// ------
// $ mkdir working-directory-name
// $ cd working-directory-name
// $ git clone https://github.com/the-concurrent-schemer/scm.git scm
// $ cd scm
// $ make deps clean compile
// ------
//
// - start REPL
// - eval an expression
// - compile a source file or files
// - ...

[bibliography]
=== CSCM Resources

An incomplete list of CSCM resources.

- website
- faq
- documentation
  * user's guide
  * contributor's guide
  * sample code and sample applications
- community mailing list
  * announce
  * questions
  * bugs
  * patches
- contributor site
  * source code repositories
  * issue tracker

[bibliography]
=== Scheme Resources

An incomplete list of Scheme resources.

[bibliography]
.Books
- [[[SICP]]] Structure and Interpretation of Computer Programs.
  http://mitpress.mit.edu/sicp/

[bibliography]
.Specifications
- [[[RNRS]]] Scheme Reports Process. http://www.scheme-reports.org

- [[[R7RS]]] R7RS _Draft_. 'Revised 7th Report on the Algorithmic
  Language
  Scheme'. http://www.scheme-reports.org/2012/working-group-1.html

[bibliography]
.Websites
- [[[SCMPEDIA]]] Scheme (programming
  language). http://en.wikipedia.org/wiki/Scheme_(programming_language)[http://en.wikipedia.org/wiki/Scheme_(programming_language)]

- [[[MITSCM]]] Scheme. 'MIT/GNU
  Scheme'. http://groups.csail.mit.edu/mac/projects/scheme/index.html

- [[[SCMORG]]] '(schemers . org): an improper list of Scheme
  resources. http://www.schemers.org

- [[[SCMWIKI]]]
  Commmunity-Scheme-Wiki. http://community.schemewiki.org

[bibliography]
=== Erlang Resources

An incomplete list of Erlang resources.

[bibliography]
.Books
- [[[JAERLANG]]] Programming Erlang: Software for a Concurrent World.
  http://pragprog.com/book/jaerlang/programming-erlang

- [[[LYSE]]] Learn You Some Erlang for great good! http://learnyousomeerlang.com

[bibliography]
.Websites
- [[[ERLPEDIA]]] Erlang (programming
  language). http://en.wikipedia.org/wiki/Erlang_(programming_language)[http://en.wikipedia.org/wiki/Erlang_(programming_language)]

- [[[ERLANG]]] ERLANG programming language. http://www.erlang.org

- [[[EUC]]] Erlang User Conference. http://www.erlang.org/euc

- [[[EFACTORY]]] Erlang Factory. http://erlang-factory.com/

- [[[ACMERLANG]]] ACM SIGPLAN Erlang
  Workshops. http://www.erlang.org/workshop

[bibliography]
=== Related Resources

An incomplete list of related resources.

- [[[ELIXIR]]] elixir. http://elixir-lang.org

- [[[LFE]]] Lisp Flavored Erlang. http://lfe.github.com

- [[[TERMITE]]] Termite Scheme. http://code.google.com/p/termite/

