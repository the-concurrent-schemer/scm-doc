// -*- Doc -*-
// vim: set syntax=asciidoc:

= The Concurrent Schemer
Joseph Wayne Norton <norton@alum.mit.edu>
:Author Initials: JWN
:title: The Concurrent Schemer
:description: The Erlang VM supports the Scheme programming language.
:footer: Functional programming for the better good!
:brand: CSCM
:brandref: https://github.com/the-concurrent-schemer
:doctype: article
:toc2:
:data-uri:
:backend: bootstrap-docs
:link-assets:
:glyphicons: http://glyphicons.com[Glyphicons]

== Overview

"The Concurrent Schemer" (CSCM) is an implementation of the Scheme
programming language built on top of the Erlang Virtual Machine.  CSCM
combines the sequential programming model of Scheme with the
concurrent, distributed, and fault-tolerant programming model of
Erlang.  Simply put, the goals of CSCM are concurrent Scheme,
distributed Scheme, and fault-tolerant Scheme.

Scheme is a statically scoped and properly tail recursive dialect of
the Lisp programming language invented by Guy Lewis Steele Jr. and
Gerald Jay Sussman at MIT.  Scheme was designed to have exceptionally
clear and simple semantics and few different ways to form expressions.
A wide variety of programming paradigms, including imperative,
functional, and object-oriented styles, find convenient expression in
Scheme.

Erlang is a programming language used to build massively scalable,
soft, real-time systems with requirements on high availability.
Erlang's run-time system has built-in support for concurrency,
distribution and fault tolerance.  Erlang is designed at the Ericsson
Computer Science Laboratory and is maintained as an open-source
project and community.

The default language is Scheme R7RS.  The default virtual machine is
Erlang/OTP R16B or higher.

CAUTION: _Please stay tuned for CSCM updates.  The specification,
documentation, and software are under construction._

== Philosophy

There is nothing new (and plenty of old) about CSCM.  Scheme is
Scheme.  Erlang is Erlang.  CSCM is Scheme and Erlang.  Nothing is
lost but a lot is to be gained.

If one already knows Scheme, one only needs to learn Erlang to know
CSCM.  If one already knows Erlang, one only needs to learn Scheme to
know CSCM.  If one already knows both Scheme and Erlang, one already
knows CSCM.

CSCM is nothing more than a carefully constructed implementation of
Scheme.  By leveraging the Erlang language, CSCM can target a concise,
precise specification of the Scheme language.  By leveraging the
Erlang VM, CSCM can target a performant, robust implementation of the
Scheme language.

CSCM is aimed at becoming an educational tool and a well-established,
high-quality implementation of concurrent Scheme.

== Features

- The following R7RS standard features are already supported or
  planned to be supported:

  * +r7rs+
  * +exact-closed+
  * +exact-complex+
  * +ieee-float+
  * +full-unicode+
  * +ratios+
  * +posix+ when the Erlang +os:type/0+ function returns +unix+ for
    +Osfamily+.
  * +windows+ when the Erlang +os:type/0+ function returns +win32+ for
    +Osfamily+.
  * +<Osfamily>+ as returned by the Erlang os:type/0 function
  * +<Osname>+ as returned by the Erlang os:type/0 function
  * +<Otprel>+ as returned by the Erlang erlang:system_info/1 function
    for +'otp_release'+
  * +<Sysarch>+ as returned by the Erlang erlang:system_info/1
    function for +'system_architecture'+
  * Subparts of +<Sysarch>+ split by the "-" character token
  * +<Wordsize>+ as returned by the Erlang erlang:system_info/1
    function for +{'wordsize', 'external'}+ multiplied by 8
  * +big-endian+
  * +scm+
  * +scm-X.Y.Z+ where X is the major, Y is the minor, and Z is the
    patch release version of scm

== Documentation

This
http://trac.sacrideo.us/wg/raw-attachment/wiki/WikiStart/overview.pdf[overview]
of the Scheme programming language download-able from the Scheme
Report\'s website is a good place to start.  The complete Scheme R7RS
http://trac.sacrideo.us/wg/raw-attachment/wiki/WikiStart/r7rs-draft-9.pdf[draft
9] specification available from the same website is the best next
step.

== Roadmap

This is roadmap is a +DRAFT+.

- Programming
  * _v0.1.0_ Sequential "datum" *PUBLISHED*
    ** datum model
    ** datum tokenizer and parser
    ** environment primitives

  * _v0.2.0_ Sequential "primitive expressions" *PUBLISHED*
    ** primitive expressions - quote, lambda, if, set!, include, include-lib
    ** programs - define

  * _v0.2.5_ Sequential "derived expressions" (part 1 of 2) *PUBLISHED*
    ** derived expressions - cond, case, and, or, when, unless,
       cond-expand, let, let*, letrec, letrec*, begin, do, named let
    ** temporary library procedures - eqv?, not

  * _v0.2.8_ Sequential "skeleton for libraries" *PUBLISHED*
    ** libraries - skeleton implementation framework for all libraries

  * _v0.3.0_ Sequential "derived expressions" (part 2 of 2) *IN PROGRESS*
    ** derived expressions - let-values, let*-values, letrec-values,
       make-parameter, parameterize, guard
    ** temporary library procedures - apply, call-with-values,
       call-with-current-continuation (a.k.a. call/cc),
       raise-continuable, values, with-exception-handler
    ** programs - define-values

  * _v0.4.0_ Sequential "base library"
    ** libraries - base without number (148 procedures)

  * _v0.5.0_ Sequential "base number library"
    ** libraries - base number (52 procedures), complex (6
       procedures), inexact (13 procedures)

  * _v0.6.0_ Sequential "libraries"
    ** programs - import, define-library
    ** libraries - case-lambda (1 procedure), char (22 procedures),
       cxr (25 procedures), eval (2 procedures), file (2 procedures),
       lazy (5 procedures), load (2 procedures), process-context (7
       procedures), read (2 procedures), repl (1 procedure), time (3
       procedures), write (8 procedures), r5rs
    ** tools - scm shell

  * _v0.7.0_ Sequential "syntax"
    ** derived expressions - quasiquote, unquote, unquote-splicing
    ** syntax - let-syntax, letrec-syntax, syntax-rules, syntax-error
    ** programs - define-syntax, define-record-type

  * _v0.8.0_ Sequential "features"
    ** extensions - Erlang-style pattern matching, records, and binary
       support
    ** integration - Erlang native functions, nif functions, and code
       loading
    ** tools - scmc compiler
    ** performance - lexical addressing for variable lookup

  * _v0.9.0_ Sequential "maintenance"
    ** bug fixes
    ** refactoring
    ** performance tuning
    ** documentation

  * _v1.0.0_ Concurrent "processes"
    ** extensions - Erlang processes and error handling
    ** libraries - erlang (demonitor, hibernate, is-process-alive,
       link, monitor, process-flag, process-info, processes, register,
       registered, resume-process, self, recv, send, send-after,
       send-nosuspend, spawn, spawn-link, spawn-monitor, spawn-opt,
       suspend-process, unlink, unregister, whereis, yield)

  * _v1.1.0_ Concurrent "distributed"
    ** extensions - Erlang distribution and error handling
    ** libraries - erlang (disconnect-node, is-alive, monitor-node,
       node, nodes)
    ** libraries - net-adm (dns-hostname, host-file, localhost, names,
       ping, world, world-list)
    ** libraries - net-kernel (allow, connect-node, monitor-nodes,
       get-net-ticktime, set-net-ticktime, start, stop)
    ** tools - epmd

  * _v1.2.0_ Concurrent "ports and drivers"
    ** extensions - Erlang ports, drivers, and error handling

  * _v1.3.0_ Concurrent "maintenance"
    ** bug fixes
    ** refactoring
    ** performance tuning
    ** documentation

- Open Telecom Platform (OTP)
  * _v1.5.0_ OTP "applications"
    ** behaviors - gen_server, gen_fsm, gen_event, supervisor
    ** logging - system
    ** applications
    ** included applications
    ** distributed applications

  * _v1.6.0_ OTP "releases"
    ** releases
    ** release handling
    ** release distribution
    ** release deployment

  * _v1.7.0_ OTP "maintenance"
    ** bug fixes
    ** refactoring
    ** performance tuning
    ** documentation

- Tools
  * _v2.0.0_ Tools
  * ...

- Education and Training
  * ...

== Enhancements

- The following enhancements beyond the <<R7RS>> specification are
  supported:

  * +include+ _primitive expression_.  A filename may start with a
    path component '$VAR', for some string VAR.  If so, the value of
    the environment variable VAR as returned by
    '(get-environment-variable VAR)' is substituted for '$VAR'.  If
    +get-environment-variable+ returns false, '$VAR' is left as is.
    If the filename is absolute (possibly after variable
    substitution), the include file with that name is included.
    Otherwise, the specified file is searched for in the current
    working directory, in the same directory as the current including
    file, and in the directories given by the 'include' option, in
    that order.  The 'include' option is available for the scm shell
    and scm compiler.
  * +include-lib+ _primitive expression_.  +include-lib+ is similar to
    +include+ but should not point out an absolute file. Instead, the
    first path component is assumed to be the name of an _Erlang_
    application.  If the filename is absolute (possibly after variable
    substitution), an error is raised.  Otherwise, the file is
    searched using the Erlang code:lib_dir/1 function.
  * +letrec-values+ _derived expression binding construct_

== Limitations

- The following symbols are reserved and not allowed as the variable
  in +set!+, +define+, +define-values+, +define-syntax+,
  +define-record-type+, and +define-library+ procedure calls. The
  +delay+, +delay-force+, +force+, +promise?+, and +make-promise+
  symbols of _section 4.2.5_ are implemented as +(scheme lazy)+
  library exports and thus are not reserved symbols.  The
  +case-lambda+ symbol of _section 4.2.9_ is implemented as a +(scheme
  case-lambda)+ library export and thus is not a reserved symbol.

  * +quote+ _section 4.1.2_
  * +lambda+ _section 4.1.4_
  * +if+ _section 4.1.5_
  * +set!+ _section 4.1.6_
  * +include+ _section 4.1.7_
  * +include-ci+ _section 4.1.7_
  * +include-lib+ _enhancement_
  * +include-lib-ci+ _unsupported enhancement_
  * +cond+ _section 4.2.1_
  * +case+ _section 4.2.1_
  * +and+ _section 4.2.1_
  * +or+ _section 4.2.1_
  * +when+ _section 4.2.1_
  * +unless+ _section 4.2.1_
  * +cond-expand+ _section 4.2.1_
  * +let+ _section 4.2.2_
  * +let*+ _section 4.2.2_
  * +letrec+ _section 4.2.2_
  * +letrec*+ _section 4.2.2_
  * +let-values+ _section 4.2.2_
  * +let*-values+ _section 4.2.2_
  * +letrec-values+ _enhancement_
  * +begin+ _section 4.2.3_
  * +do+ _section 4.2.4_
  * +make-parameter+ _section 4.2.6_
  * +parameterize+ _section 4.2.6_
  * +guard+ _section 4.2.7_
  * +quasiquote+ _section 4.2.8_
  * +unquote+ _section 4.2.8_
  * +unquote-splicing+ _section 4.2.8_
  * +let-syntax+ _section 4.3.1_
  * +letrec-syntax+ _section 4.3.1_
  * +syntax-rules+ _section 4.3.2_
  * +syntax-error+ _section 4.3.2_
  * +import+ _section 5.2_
  * +define+ _section 5.3.1 and 5.3.2_
  * +define-values+ _section 5.3.3_
  * +define-syntax+ _section 5.4_
  * +define-record-type+ _section 5.5_
  * +define-library+ _section 5.6_

- Unsupported lexical conventions:
  * +datum labels+
  * The +#!fold-case+ and +#!no-fold-case+ directives are treated as
    comments and have no effect on identifiers and character names
    read from the same port.

- Unsupported primitive expressions:
  * +include-ci+
  * +include-lib-ci+ _unsupported enhancement_

- Unsupported +(scheme base)+ library exports:
  * +bytevector-copy!+
  * +bytevector-u8-set!+
  * +list-set!+
  * +read-bytevector!+
  * +set-car!+
  * +set-cdr!+
  * +string-copy!+
  * +string-fill!+
  * +string-set!+
  * +vector-copy!+
  * +vector-fill!+
  * +vector-set!+

- Miscellaneous
  * Inexact constants have double precision regardless of the
    specified exponent marker.

== Support

Please report software issues to the
https://github.com/the-concurrent-schemer/scm/issues[scm] GitHub issue
tracker if you have have trouble, found a bug, or simply have a
question.  Similarly, please report documentation and specification
issues to the
https://github.com/the-concurrent-schemer/scm-doc/issues[scm-doc]
GitHub issue tracker.

Support is provided on a timely, best-effort basis.

== Contributors

CSCM is looking for contributors to help with all parts of the
Roadmap.

[source,scheme]
(define #Fun (+ #Scheme #Erlang))

If you are interested in Scheme, Erlang, Functional programming, or
otherwise, please
mailto:nortonATalum.mit.edu?subject=Inquiry%20about%20The%20Concurrent%20Schemer[contact
Joe N.] for more information.

== Copyright and License

------------
The MIT License

Copyright (C) 2013 by Joseph Wayne Norton <norton@alum.mit.edu>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
------------

[bibliography]
== CSCM Resources
An incomplete +todo+ list of CSCM resources.

- website
- faq
- documentation
  * user's guide
  * contributor's guide
  * sample code and sample applications
- community mailing list
  * announce
  * questions
  * bugs
  * patches
- contributor site
  * source code repositories
  * issue tracker

[bibliography]
== Scheme Resources
An incomplete list of Scheme resources.

[bibliography]
.Books
- [[[SICP]]] Structure and Interpretation of Computer Programs.
  http://mitpress.mit.edu/sicp/

[bibliography]
.Specifications
- [[[RNRS]]] Scheme Reports Process. http://www.scheme-reports.org

- [[[R7RS]]] R7RS _Draft_. 'Revised 7th Report on the Algorithmic
  Language
  Scheme'. http://www.scheme-reports.org/2012/working-group-1.html

[bibliography]
.Websites
- [[[SCMPEDIA]]] Scheme (programming
  language). http://en.wikipedia.org/wiki/Scheme_(programming_language)[http://en.wikipedia.org/wiki/Scheme_(programming_language)]

- [[[MITSCM]]] Scheme. 'MIT/GNU
  Scheme'. http://groups.csail.mit.edu/mac/projects/scheme/index.html

- [[[SCMORG]]] '(schemers . org): an improper list of Scheme
  resources. http://www.schemers.org

- [[[SCMWIKI]]]
  Community-Scheme-Wiki. http://community.schemewiki.org

[bibliography]
== Erlang Resources
An incomplete list of Erlang resources.

[bibliography]
.Books
- [[[JAERLANG]]] Programming Erlang: Software for a Concurrent World.
  http://pragprog.com/book/jaerlang/programming-erlang

- [[[LYSE]]] Learn You Some Erlang for great good! http://learnyousomeerlang.com

[bibliography]
.Websites
- [[[ERLPEDIA]]] Erlang (programming
  language). http://en.wikipedia.org/wiki/Erlang_(programming_language)[http://en.wikipedia.org/wiki/Erlang_(programming_language)]

- [[[ERLANG]]] ERLANG programming language. http://www.erlang.org

- [[[EUC]]] Erlang User Conference. http://www.erlang.org/euc

- [[[EFACTORY]]] Erlang Factory. http://erlang-factory.com/

- [[[ACMERLANG]]] ACM SIGPLAN Erlang
  Workshops. http://www.erlang.org/workshop

[bibliography]
== Related Resources
An incomplete list of related resources.

- [[[ELIXIR]]] elixir. http://elixir-lang.org

- [[[LFE]]] Lisp Flavored Erlang. http://lfe.github.com

- [[[TERMITE]]] Termite Scheme. http://code.google.com/p/termite/

// -EOF-
